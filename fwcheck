#!/usr/bin/env bash
set -e

PROG=$(basename $0)

showhelp() {
cat <<EOF
Wrapper around ssh and netcat to check connectivity.

Usage: $PROG [options] [<source_host>[:<source_port>]] <dest_host>:<dest_port>
    -h|--help           show help.


source_host     If set, the host from where the port scan is performed.
                Must be SSH reachable. If unset check is performed without SSH
                on localhost.

source_port     The source port of the connection test. Defaults to any port.

dest_host       The destination host of the connection test.

dest_port       The destination port of the connection test.

Examples:
    $PROG 10.219.27.1 www.example.com:443
EOF
    exit;
}

for i
do
    case $1 in
        -h|--help) showhelp; exit 0;;
        -*) echo "Unknown option: $1" >&2; exit 1;;
        *) break;;
    esac
done

source_host='localhost'

if [[ $# == 2 ]]; then
    IFS=':' read source_host source_port <<<"$1"
    shift
fi

if [[ $# == 1 ]]; then
    IFS=':' read dest_host dest_port <<<"$1"
    shift
fi

if [[ $# != 0 ]]; then
    echo "Unknown arguments: $*" >&2
    exit 1
fi

if [[ "$dest_port" == '' ]]; then
    echo "Missing destination port." >&2
    exit 1
fi

source="$source_host:$source_port"
source="${source%:}" # remove trailing colon if no source_port
dest="$dest_host:$dest_port"

define() { IFS='\n' read -r -d '' ${1} || true; }



define nc_cmd <<EOF
function require_installed() {
    if ! type \$1 1>/dev/null 2>&1; then
        echo "$source_host: missing command: \$1" >&2
        exit 100
    fi
}

require_installed host
if ! host $dest_host 1>/dev/null 2>&1; then
    echo "[FAILED] $source -> $dest (unknown destination host)"
    exit 101
fi

require_installed timeout
require_installed nc
nc_args='-z'
if [[ "$source_port" != '' ]]; then
    nc_args="\$nc_args -p \$source_port"
fi
timeout 1 nc "\$nc_args" $dest_host $dest_port 1>/dev/null 2>&1
status=\$?
case \$status in
    124) echo "[FAILED] $source -> $dest (timeout)";;
    0)   echo "[OK]     $source -> $dest (open port)";;
    1)   echo "[OK]     $source -> $dest (closed port)"; status=0;;
    *)   echo "[FAILED] $source -> $dest (unknown status: $status)";;
esac
exit $status
EOF

set +e
if [[ $source_host != 'localhost' ]]; then
    status=126
    if !type ssh 1>/dev/null 2>&1; then
        echo "missing command: ssh" >&2
        exit 1
    fi
    ssh -n $source_host "$nc_cmd"
    status=$?
else
    bash <<< "$nc_cmd"
    status=$?
fi
set -e

exit $status
